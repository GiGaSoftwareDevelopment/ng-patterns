# <%= className %> NgRx Entity Store

This Store is built to NgRx recommended configuration. See [NgRX Entity Adapter Doc](https://ngrx.io/guide/entity/adapter) on how use the NgRx Entity Store.

## Add to your application

You have three options:

1. Import the `<%= fileName %>.module` into your app or library module.
2. Configure as a Feature store in your app or library module:

####  Using NgModule:
   ```typescript

      import { <%= propertyName %>Reducer } from '[ path to reducer ]';

      StoreModule.forFeature(<%= propertyName %>sFeatureKey, <%= propertyName %>Reducer, {
            initialState: initial<%= className %>State,
        }),
      EffectsModule.forFeature([<%= className %>Effects])
   ```

 ### Using StoreModule.forRoot:

  ```typescript

      import { <%= propertyName %>Reducer } from '[ path to reducer ]';

      StoreModule.forRoot(
            {
                [<%= propertyName %>sFeatureKey]: <%= propertyName %>Reducer,
                ...
            },
            {
                initialState: {
                    [<%= propertyName %>sFeatureKey]: initial<%= className %>State,
                    ...
                },
            }
        ),
      EffectsModule.forRoot([<%= className %>Effects]),
   ```

 ### Standalone Root Store

 ```
     provideStore({
         [<%= propertyName %>sFeatureKey]: <%= propertyName %>Reducer
       },
       {
         initialState: {
           [<%= propertyName %>sFeatureKey]: initial<%= className %>State
         },
         runtimeChecks: {
           strictStateImmutability: true,
           strictActionImmutability: true,
           strictStateSerializability: true,
           strictActionSerializability: true,
           strictActionWithinNgZone: true,
           strictActionTypeUniqueness: true
         }
       }
     ),
     provideEffects([ <%= className %>Effects ]),
     provideStoreDevtools({
       maxAge: 25,
       logOnly: environment.production
     }),
     provideHttpClient(),

 ```

3. Configure as a Root store in your app or library module:

   ```typescript

     import { <%= propertyName %>Reducer } from '[ path to reducer ]';

      StoreModule.forRoot(
            {
                [<%= propertyName %>sFeatureKey]: <%= propertyName %>Reducer,
                ...
            },
            {
                initialState: {
                    [<%= propertyName %>sFeatureKey]: initial<%= className %>State,
                    ...
                },
            }
        ),
      EffectsModule.forRoot([<%= className %>Effects]),
   ```

4. Use the `<%= className %>Facade` in your components or services.

    ```typescript

    constructor(private <%= propertyName %>Facade: <%= className %>Facade) {}
   ```


   ```angular2html
      <div *ngFor="let <%= propertyName %> of <%= propertyName %>s">
        {{ <%= propertyName %> | json }}
      </div>
  ```
