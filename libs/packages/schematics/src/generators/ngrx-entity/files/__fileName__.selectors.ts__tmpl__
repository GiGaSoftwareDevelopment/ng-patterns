import {createFeatureSelector, createSelector} from '@ngrx/store';
import * as <%= className %>Reducer from './<%= fileName %>.reducer';
import { <%= className %> } from './<%= className %>.model';
import { Dictionary } from '@ngrx/entity';

export const select<%= className %>State = createFeatureSelector<<%= className %>Reducer.<%= className %>State>(<%= className %>Reducer.<%= propertyName %>sFeatureKey);

const {selectIds, selectEntities, selectAll, selectTotal} = <%= className %>Reducer.<%= propertyName %>Adapter.getSelectors();

export const selectAll<%= className %>s = createSelector(select<%= className %>State, selectAll);
export const select<%= className %>Entities = createSelector(select<%= className %>State, selectEntities);
export const select<%= className %>Ids = createSelector(select<%= className %>State, selectIds);
export const select<%= className %>Total = createSelector(select<%= className %>State, selectTotal);


export const select<%= className %>LoadingInProgress = createSelector(
    select<%= className %>State,
    (state: <%= className %>Reducer.<%= className %>State) => state.isLoading
);

export const selectCurrent<%= className %>Id = createSelector(
  select<%= className %>State,
  (state: <%= className %>Reducer.<%= className %>State) => state.selectedId
);


export const selectCurrent<%= className %> = createSelector(
  select<%= className %>Entities,
  selectCurrent<%= className %>Id,
  (entities,  <%= propertyName %>Id): <%= className %> | null => {
    if ( <%= propertyName %>Id && entities[ <%= propertyName %>Id] !== undefined && entities[ <%= propertyName %>Id] !== null) {
      return <<%= className %>>entities[ <%= propertyName %>Id]
    }
    return null;
  }
);

export const selectDeleted<%= className %>s = () => {

  let currentEntities: Dictionary<<%= className %>> = {}

  return createSelector(
    select<%= className %>Entities,
    (entities: Dictionary<<%= className %>>): <%= className %>[] => {

      const deletedEntities = Object.keys(currentEntities)
        .reduce((result: { [key: string]: <%= className %> }, key: string) => {
          if (!entities[key] && currentEntities[key]) {
            result[key] = <<%= className %>>currentEntities[key];
          }
          return result;
        }, {});

      currentEntities = {
        ...entities
      };

      return Object.values(deletedEntities);
    }
  );
}


export const select<%= className %>Error = createSelector(
  select<%= className %>State,
  (state: <%= className %>Reducer.<%= className %>State) => state.error
);

export const select<%= className %>Loaded = createSelector(
  select<%= className %>State,
  (state: <%= className %>Reducer.<%= className %>State) => state.isLoaded
);

export const select<%= className %>Loading = createSelector(
  select<%= className %>State,
  (state: <%= className %>Reducer.<%= className %>State) => state.isLoading
);


export const selectIsFirst<%= className %>Selected = createSelector(
  select<%= className %>Ids,
  selectCurrent<%= className %>Id,
  (ids, currentId) => {
    if (ids.length > 0 && currentId) {
      return ids[0] === currentId;
    }

    //
    return true;
  }
);

export const selectIsLast<%= className %>Selected = createSelector(
  select<%= className %>Ids,
  selectCurrent<%= className %>Id,
  (ids, currentId) => {
    if (ids.length > 0 && currentId) {
      return ids[ids.length - 1] === currentId;
    }

    // Used for disabling the next button
    // if there are no  <%= propertyName %>s or the last  <%= propertyName %> is selected
    return true;
  });

